%**************************************

%  Model based on a PRISM case study

% See http://www.prismmodelchecker.org/casestudies/crowds.php
% for more informations
% PARAMETERS : 
%    - pf = 0.8
%    - TotalRuns = 3
%    - CrowdSize  = 5
%    - badC = 0.167

%**************************************
% Formulas to try on :

% In Prolog :
% sat(probformula(equal,P,f(p(xtl_predicate_check(positive)))),0). 
% Using the parser (not tested yet) :
% P={p} [f p(xtl_predicate_check(positive))]

% PRISM result : 0.13834059174452618 +/- 1.3130986283544154E-6



% In Prolog :
% sat(probformula(equal,P,f(p(xtl_predicate_check(false_positive)))),0).
% Using the parser (not tested yet) :
% P={p} [f p(xtl_predicate_check(false_positive))]

% PRISM result : 0.0510421803550274 +/- 5.059763339046543E-7



% In Prolog :
% sat(probformula(equal,P,f(p(xtl_predicate_check(confidence)))),0).
% Using the parser (not tested yet) :
% P={p} [f p(xtl_predicate_check(confidence))]

% PRISM result : 0.13834059174452618 +/- 1.3130986283544154E-6



%**************************************

%  START

start(param(
    new(true), /*Initialize a new protocol instance*/
    runCount(3), /*@desc Count protocol instances*/
    begin(false), /*@desc Start the protocol*/
    run(false), /*@desc Run the protocol*/
    lastSeen(5), /*@desc Last crowd member to touch message*/
    good(false), /*@desc The crowd member is good*/
    bad(false), /*@desc The crowd member is corrupt*/
    recordLast(false), /*@desc Record last seen crowd member?*/
    badObserve(false), /*@desc Bad members observes who sent message?*/
    deliver(false), /*@desc Deliver message to destination?*/
    done(false), /*@desc Protocol instance finished?*/
    observe(0,0,0,0,0) /*@desc How many times each member have been observed by a bad member*/
    )).


% ------------------------------------------------

% TRANSITIONS


% Inititialize a new protocol instance, with a reformulated path
trans(
    new_protocol,
    param(
        new(true),runCount(X),_Begin,Run,LastSeen,Good,
        Bad,RecordLast,BadObserve,Deliver,Done,Observe
    ),
    param(
        new(false),runCount(Y),begin(true),Run,LastSeen,Good,
        Bad,RecordLast,BadObserve,Deliver,Done,Observe
    ),
    [probability/1.0]
    ) :- 
        0<X,
        X<4,
        Y is X-1.


%   Start the protocol
trans(
    start_protocol,
    param(
        New,RunCount,begin(true),_Run,_LastSeen,Good,
        Bad,RecordLast,BadObserve,_Deliver,Done,Observe
    ),
    param(New,RunCount,begin(false),run(true),lastSeen(0),Good,
        Bad,RecordLast,BadObserve,deliver(false),Done,Observe
    ),
    [probability/1.0]
    ).



%  Send the message to a honest crowd member
trans(
    is_a_good_member(true),
    param(
        New,RunCount,Begin,run(true),LastSeen,good(false),
        bad(false),_RecordLast,BadObserve,deliver(false),Done,Observe
    ),
    param(
        New,RunCount,Begin,run(false),LastSeen,good(true),
        bad(false),recordLast(true),BadObserve,deliver(false),Done,Observe
    ),
    [probability/0.833]
    ).


%  Send the message to a corrupt crowd member
trans(
    is_a_good_member(false),
    param(
        New,RunCount,Begin,run(true),LastSeen,good(false),
        bad(false),RecordLast,_BadObserve,deliver(false),Done,Observe
    ),
    param(
        New,RunCount,Begin,run(false),LastSeen,good(false),
        bad(true),RecordLast,badObserve(true),deliver(false),Done,Observe
    ),
    [probability/0.167]
    ).


%  Forward the message to another crowd member
trans(
    forward_or_deliver(true),
    param(
        New,RunCount,Begin,run(true),LastSeen,good(true),
        Bad,RecordLast,BadObserve,deliver(false),Done,Observe
    ),
    param(
        New,RunCount,Begin,run(true),LastSeen,good(false),
        Bad,RecordLast,BadObserve,deliver(false),Done,Observe
    ),
    [probability/0.8]
    ).


% Deliver the message to the receiver
trans(
    forward_or_deliver(false),
    param(
        New,RunCount,Begin,run(true),LastSeen,good(true),
        Bad,RecordLast,BadObserve,deliver(false),Done,Observe
    ),
    param(
        New,RunCount,Begin,run(true),LastSeen,good(true),
        Bad,RecordLast,BadObserve,deliver(true),Done,Observe
    ),
    [probability/0.2]
    ).


% Record the last member in touch with the message
trans(
    record(0),
    param(
        New,RunCount,Begin,_Run,_LastSeen,Good,
        Bad,recordLast(true),BadObserve,Deliver,Done,Observe
    ),
    param(
        New,RunCount,Begin,run(true),lastSeen(0),Good,
        Bad,recordLast(false),BadObserve,Deliver,Done,Observe
    ),
    [probability/0.2]
    ).

trans(
    record(1),
    param(
        New,RunCount,Begin,_Run,_LastSeen,Good,
        Bad,recordLast(true),BadObserve,Deliver,Done,Observe
    ),
    param(
        New,RunCount,Begin,run(true),lastSeen(1),Good,
        Bad,recordLast(false),BadObserve,Deliver,Done,Observe
    ),
    [probability/0.2]
    ).

trans(
    record(2),
    param(
        New,RunCount,Begin,_Run,_LastSeen,Good,
        Bad,recordLast(true),BadObserve,Deliver,Done,Observe
    ),
    param(
        New,RunCount,Begin,run(true),lastSeen(2),Good,
        Bad,recordLast(false),BadObserve,Deliver,Done,Observe
    ),
    [probability/0.2]
    ).

trans(
    record(3),
    param(
        New,RunCount,Begin,_Run,_LastSeen,Good,
        Bad,recordLast(true),BadObserve,Deliver,Done,Observe
    ),
    param(
        New,RunCount,Begin,run(true),lastSeen(3),Good,
        Bad,recordLast(false),BadObserve,Deliver,Done,Observe
    ),
    [probability/0.2]
    ).

trans(
    record(4),
    param(
        New,RunCount,Begin,_Run,_LastSeen,Good,
        Bad,recordLast(true),BadObserve,Deliver,Done,Observe
    ),
    param(
        New,RunCount,Begin,run(true),lastSeen(4),Good,
        Bad,recordLast(false),BadObserve,Deliver,Done,Observe
    ),
    [probability/0.2]
    ).


% A corrupt member takes notes of the last member
trans(
    eavesdrop,
    param(
        New,RunCount,Begin,_Run,lastSeen(Member),Good,
        Bad,RecordLast,badObserve(true),_Deliver,Done,observe(O0,O1,O2,O3,O4)
    ),
    param(
        New,RunCount,Begin,run(true),lastSeen(Member),Good,
        Bad,RecordLast,badObserve(false),deliver(true),Done,observe(O0_New,O1_New,O2_New,O3_New,O4_New)
    ),
    [probability/1.0]
    ) :-
        Member = 0 ->
            O0 < 3,
            O0_New is O0 + 1,
            O1_New=O1,O2_New=O2,O3_New=O3,O4_New=O4
        ; Member = 1 ->
            O1 < 3,
            O1_New is O1 + 1,
            O0_New=O0,O2_New=O2,O3_New=O3,O4_New=O4
        ; Member = 2 ->
            O2 < 3,
            O2_New is O2 + 1,
            O0_New=O0,O1_New=O1,O3_New=O3,O4_New=O4
        ; Member = 3 ->
            O3 < 3,
            O3_New is O3 + 1,
            O0_New=O0,O2_New=O2,O1_New=O1,O4_New=O4
        ; Member = 4 ->
            O4 < 3,
            O4_New is O4 + 1,
            O0_New=O0,O2_New=O2,O3_New=O3,O1_New=O1
        .


% Deliver the message to the receiver
trans(
    deliver,
    param(
        New,RunCount,Begin,run(true),LastSeen,_Good,
        _Bad,RecordLast,BadObserve,deliver(true),_Done,Observe
    ),
    param(
        New,RunCount,Begin,run(false),LastSeen,good(false),
        bad(false),RecordLast,BadObserve,deliver(false),done(true),Observe
    ),
    [probability/1.0]
    ).


% Restart a new protocol, with a new path formulation
trans(
    restart,
    param(
        _New,RunCount,Begin,_Run,_LastSeen,Good,
        Bad,RecordLast,BadObserve,Deliver,done(true),Observe
    ),
    param(
        new(true),RunCount,Begin,run(false),lastSeen(5),Good,
        Bad,RecordLast,BadObserve,Deliver,done(false),Observe
    ),
    [probability/1.0]
    ).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%   PROPERTIES


%   The adversary observed the real sender more than once
prop(
    param(
        _New,_RunCount,_Begin,_Run,_LastSeen,_Good,
        _Bad,_RecordLast,_BadObserve,_Deliver,_Done,observe(X,_,_,_,_)
    ),
    positive) :-
        X>1.


%   The adversary observed someone other than the real sender more than once
prop(
    param(
        _New,_RunCount,_Begin,_Run,_LastSeen,_Good,
        _Bad,_RecordLast,_BadObserve,_Deliver,_Done,
        observe(Obs0,Obs1,Obs2,Obs3,Obs4)
    ),
    false_positive) :-
        Obs0 =<1,
        (Obs1 > 1;
        Obs2 > 1;
        Obs3 > 1;
        Obs4 > 1).


%   The adversary observed the real sender and only the real sender more than once
prop(
    param(
        _New,_RunCount,_Begin,_Run,_LastSeen,_Good,
        _Bad,_RecordLast,_BadObserve,_Deliver,_Done,
        observe(Obs0,Obs1,Obs2,Obs3,Obs4)
    ),
    confidence) :-
        Obs0 > 1,
        Obs1 =< 1,
        Obs2 =< 1,
        Obs3 =< 1,
        Obs4 =< 1.